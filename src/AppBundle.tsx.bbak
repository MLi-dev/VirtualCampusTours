// @ts-nocheck
import { useEffect, useRef, useState } from "react";
import "./App.css";
import { boxFactoryType, makeBoxFactory } from "./scene-components/SimpleBox";
import { iotBoxType, makeIotBox } from "./scene-components/IotBox";
import Iframe from "./UI/Iframe";
import { isElement } from "react-dom/test-utils";

function App() {
  const [sdk, setSdk] = useState();
  const [horizontal, setHorizontal] = useState(45);
  const [vertical, setVertical] = useState(0);
  const container = useRef();
  const [isLoaded, setIsLoaded] = useState(false);

  const [matterTag1, setMatterTag1] = useState([]);
  const [matterTag2, setMatterTag2] = useState("");
  const [componentBoxFactory, setComponentBoxFactory] = useState();
  const [nodeBoxFactory, setNodeBoxFactory] = useState();
  const [positionBoxFactory, setPositionBoxFactory] = useState(
    "x=0" + ", y=0" + ",z=0"
  );

  const [componentIotBox, setComponentIotBox] = useState();

  const [iframe, setIframe] = useState();

  const showCaseLoaded = async () => {
    const showcase = document.getElementById("showcase");
    const key = "w78qr7ncg7npmnhwu1xi07yza";
    try {
      const rtvSDK = await showcase.contentWindow.MP_SDK.connect(
        showcase,
        key,
        "3.6"
      );
      setSdk(rtvSDK);
    } catch (e) {
      console.error(e);
      return;
    }
    sdk?.App.state.waitUntil((state) => {
      console.log(state);
      if (state.phase == "appphase.playing") {
        return true;
      } else {
        return false;
      }
    });
  };

  useEffect(() => {
    loaded().then(
      sdk?.App.state.waitUntil((state) =>
        state.phase == "appphase.playing"
          ? setIsLoaded(true)
          : console.log(state.phase)
      )
    );
  }, [sdk]);
  async function loaded() {
    await sdk?.App.state.waitUntil(
      (state) => state.phase === sdk.App.Phase.PLAYING
    );
  }
  useEffect(() => {
    //After finished load

    if (isLoaded === true) {
      initialFunction();
    }
  }, [isLoaded]);

  useEffect(() => {
    const interval = setInterval(() => {
      if (isLoaded) {
        //timer do something
        editMatterTag();
      }
    }, 2000);
    return () => clearInterval(interval);
  }, [matterTag1, matterTag2]);

  const registerCustomComponent = async () => {
    sdk.Scene.register(boxFactoryType, makeBoxFactory);
    sdk.Scene.register(iotBoxType, makeIotBox);
  };

  const initialFunction = async () => {
    const [sceneObject] = await sdk.Scene.createObjects(1);
    const lightsNode = sceneObject.addNode();
    const directionalLightComponet = lightsNode.addComponent(
      "mp.directionalLight",
      {
        color: { r: 0.7, g: 0.7, b: 0.7 },
      }
    );
    lightsNode.addComponent("mp.ambientLight", {
      intensity: 0.5,
      color: { r: 1.0, g: 1.0, b: 1.0 },
    });
    const ambientIntensityPath = sceneObject.addInputPath(
      directionalLightComponet,
      "intensity",
      "ambientIntensity"
    );
    lightsNode.start();

    registerCustomComponent();
    addComponentNode4();

  };

  const iframeHandler = () => {
    setIframe(null);
  };
  const setPositionStateBoxFactory = (newx, newy, newz) => {
    nodeBoxFactory.position.set(newx, newy, newz);
    setPositionBoxFactory("x=" + newx + ", y=" + newy + " , z=" + newz);
  };

  const setColorBoxFactoryMat = (r, g, b) => {
    componentBoxFactory.material.color.setRGB(r, g, b);
  };

  const setColorIotMat = (r, g, b) => {
    componentIotBox.material.color.setRGB(r, g, b);
  };

  const customEvent = (msg) => {
    console.log("clicked");
    alert("สถานะปัจจุบัน" + msg);
  };


  const addComponentNode4 = async () => {
    var [sceneObject] = await sdk.Scene.createObjects(1);
    var node4 = sceneObject.addNode("node-obj-4");
    var initial = {
      //url: "https://static.matterport.com/showcase-sdk/examples/assets-1.0-2-g6b74572/assets/models/sofa/9/scene.gltf",
      visible: true,
      size: { x: 0.2, y: 32, z: 16 },
      localScale: {
        x: 1,
        y: 1,
        z: 1,
      },
      localPosition: {
        x: -1,
        y: -7.5,
        z: 2.25,
      },
      localRotation: {
        x: 0,
        y: 0,
        z: 0,
      },
      color: { r: 1, g: 0.5, b: 0 },
      updateInterval: 3000,
      updateApiUrl:
        "https://pom-iot-default-rtdb.asia-southeast1.firebasedatabase.app/color.json",
      /*  position: { x: -1, y: -7.5, z: 2.25 }, */
    };

    const gltfrtv = node4.addComponent(iotBoxType, initial, "my-component-4");

    class ClickSpy {
      node = node4;
      component = gltfrtv;
      eventType = "INTERACTION.CLICK";
      onEvent(payload) {
        console.log("received node4", payload, this);
        console.log(this.component.outputs.objectRoot.scale);
        customEvent(this.component.inputs.myUpdatedHexColor);
      }
    }
    node4.position.set(-0.8, -9, 2.25);
    gltfrtv?.spyOnEvent(new ClickSpy());

    setComponentIotBox(gltfrtv);
    node4.start();

  };



  return (
    <div className="app">
      <div>
        {/* {positionBoxFactory} */}
        {/*  <button onClick={() => (alert(nodeBoxFactory.position.x +"," +nodeBoxFactory.position.y+"," +nodeBoxFactory.position.z  ))}>
          Get Location
        </button> */}

        {/* <button onClick={()=>(nodeBox.start())}>Start Node</button>
        <button onClick={()=>(nodeBox.stop())}>Stop Node</button> */}
      </div>
      {iframe && (
        <Iframe
          title={iframe.title}
          message={iframe.message}
          onConfirm={iframeHandler}
        />
      )}
      <iframe
        id="showcase"
        src="/bundle/showcase.html?m=V5hx2ktRhvH&play=1&qs=1&log=0&applicationKey=w78qr7ncg7npmnhwu1xi07yza"
        width="1200px"
        height="800px"
        frameBorder="0"
        allow="xr-spatial-tracking"
        allowFullScreen
        ref={container}
        onLoad={showCaseLoaded}
      >
        {" "}
      </iframe>
    </div>
  );
}

export default App;
